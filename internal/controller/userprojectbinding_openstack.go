package controller

import (
	"context"
	"fmt"
	"net/url"
	"strings"

	"github.com/go-logr/logr"
	"github.com/gophercloud/gophercloud"
	"github.com/gophercloud/gophercloud/openstack"
	"github.com/gophercloud/gophercloud/openstack/identity/v3/applicationcredentials"
	"github.com/pluscontainer/pco-reseller-cli/pkg/openapi"
	"github.com/pluscontainer/pco-reseller-operator/api/v1alpha1"
	v1 "k8s.io/api/core/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	meta_v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/types"
)

const applicationCredentialIdKey = "application-credential-id"
const applicationCredentialSecretKey = "application-credential-secret"

func (r *UserProjectBindingReconciler) ensureApplicationCredential(ctx context.Context, logger logr.Logger, upb *v1alpha1.UserProjectBinding, region v1alpha1.Region, project openapi.ProjectCreatedResponse, userId string, username string, password string) error {
	svc, err := openStackIdentityClient(region, project, username, password)
	if err != nil {
		return err
	}

	appCredName := getApplicationCredentialName(project.Name, username)

	pager := applicationcredentials.List(svc, userId, applicationcredentials.ListOpts{Name: appCredName})
	if pager.Err != nil {
		return pager.Err
	}
	pages, err := pager.AllPages()
	if err != nil {
		return err
	}
	isEmpty, err := pages.IsEmpty()
	if err != nil {
		return err
	}

	//Create application credential if it doesn't exist
	if isEmpty {
		result := applicationcredentials.Create(svc, userId, applicationcredentials.CreateOpts{
			Name:        appCredName,
			Description: "Generated by PCO Reseller Operator",
		})

		if result.Err != nil {
			return result.Err
		}

		ac, err := result.Extract()
		if err != nil {
			return err
		}

		isTrue := true

		accessSecret := &v1.Secret{
			ObjectMeta: meta_v1.ObjectMeta{
				Namespace: upb.Namespace,
				Name:      upb.ApplicationCredentialName(),
			},
			Immutable: &isTrue,
			StringData: map[string]string{
				applicationCredentialIdKey:     ac.ID,
				applicationCredentialSecretKey: ac.Secret,
			},
		}

		if err := r.createOrPatch(ctx, accessSecret); err != nil {
			return err
		}

		logger.Info(fmt.Sprintf("Application credential %s created", appCredName))

	} else {
		logger.Info(fmt.Sprintf("Application credential %s already exists", appCredName))
	}

	return nil
}

func (r *UserProjectBindingReconciler) deprovisionApplicationCredential(ctx context.Context, logger logr.Logger, upb *v1alpha1.UserProjectBinding, region v1alpha1.Region, project openapi.ProjectCreatedResponse, userId string, username string, password string) error {
	accessSecretName := types.NamespacedName{
		Name:      upb.ApplicationCredentialName(),
		Namespace: upb.Namespace,
	}
	accessSecret := &v1.Secret{}

	if err := r.Get(ctx, accessSecretName, accessSecret); err != nil {
		if !errors.IsNotFound(err) {
			return err
		}

		logger.Info("Application Credential already gone")
		return nil
	}

	svc, err := openStackIdentityClient(region, project, username, password)
	if err != nil {
		return nil
	}

	result := applicationcredentials.Delete(svc, userId, string(accessSecret.Data[applicationCredentialIdKey]))
	if result.Err != nil {
		if !strings.Contains(result.Err.Error(), "Resource not found") {
			return result.Err
		}
	}

	if err := r.Delete(ctx, accessSecret); err != nil {
		if !errors.IsNotFound(err) {
			return err
		}
	}

	logger.Info("Application Credential deleted")
	return nil
}

func openStackIdentityClient(region v1alpha1.Region, project openapi.ProjectCreatedResponse, username string, password string) (*gophercloud.ServiceClient, error) {
	url, err := url.Parse(region.Spec.Endpoint)
	if err != nil {
		return nil, err
	}

	keyStoneUrl := fmt.Sprintf("https://%s:5000", strings.Split(url.Host, ":")[0])
	domainName := strings.Split(project.Name, "-")[0]

	opts := gophercloud.AuthOptions{
		IdentityEndpoint: keyStoneUrl,
		Username:         username,
		Password:         password,
		TenantName:       project.Name,
		DomainName:       domainName,
	}

	client, err := openstack.AuthenticatedClient(opts)
	if err != nil {
		return nil, err
	}

	svc, err := openstack.NewIdentityV3(client, gophercloud.EndpointOpts{})
	if err != nil {
		return nil, err
	}

	return svc, nil
}

func getApplicationCredentialName(projectName string, username string) string {
	return fmt.Sprintf("%s-%s", projectName, username)
}
